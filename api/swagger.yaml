---
swagger: "2.0"
info:
  description: "Data API for Screenwriter: an online collaborative screenwriting software."
  version: "0.0.1"
  title: "Screenwriter API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "logan@theinitiativepg.ocm"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "burningphantom.com"
basePath: "/v1"
tags:
- name: "projects"
  description: "The collected documents for a screenwriting project"
  externalDocs:
    description: "Find out more"
    url: "http://www.burningphantom.com/screenwriter"
- name: "scripts"
  description: "Script document operations"
- name: "documents"
  description: "Text document operations"
- name: "user"
  description: "User settings operations"
schemes:
- "http"
paths:
  /projects:
    get:
      tags:
      - "projects"
      summary: "Get all projects"
      description: "Returns all projects for this account"
      operationId: "getProjects"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Project not found"
      security:
      - screenwriter_auth:
        - "read:projects"
    post:
      tags:
      - "projects"
      summary: "Add a new project to the account"
      description: ""
      operationId: "addProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "Project object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Id"
      responses:
        405:
          description: "Invalid input"
      security:
      - screenwriter_auth:
        - "write:projects"
    put:
      tags:
      - "projects"
      summary: "Update an existing project"
      description: ""
      operationId: "updateProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "Project object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Id"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Project not found"
        405:
          description: "Validation exception"
      security:
      - screenwriter_auth:
        - "write:projects"
    delete:
      tags:
      - "projects"
      summary: "Delete an existing project"
      description: "Remove a project with all associated documents"
      operationId: "deleteProject"
      parameters:
      - in: "body"
        name: "id"
        description: "Project object that needs to be deleted from the store"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Id"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Project not found"
        405:
          description: "Validation exception"
      security:
      - screenwriter_auth:
        - "delete:projects"
  /projects/{id}:
    get:
      tags:
      - "projects"
      summary: "Find project by ID"
      description: "Returns a single project"
      operationId: "getProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of project to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Project not found"
      security:
      - screenwriter_auth:
        - "read:projects"
  /projects/search?term=searchby&value=searchfor:
    get:
      tags:
      - "projects"
      summary: "Finds Projects by name"
      description: "Each project should have a unique name"
      operationId: "getProjectByName"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "The term to search by"
        required: true
        type: "string"
        x-exportParamName: "Term"
      - name: "value"
        in: "query"
        description: "The value to search for"
        required: true
        type: "string"
        x-exportParamName: "Value"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid tag value"
      security:
      - screenwriter_auth:
        - "read:projects"
  /project/getProjectDocuments:
    get:
      tags:
      - "projects"
      summary: "Get project scripts"
      description: "Retrieve all scripts for a project"
      operationId: "getProjectDocuments"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the project"
        required: true
        schema:
          $ref: "#/definitions/Script"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Script"
        400:
          description: "Invalid Script"
  /scripts:
    get:
      tags:
      - "scripts"
      summary: "Get project scripts"
      description: "Retrieve all scripts for a project"
      operationId: "getScripts"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the project"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Script"
        400:
          description: "Invalid Script"
      security:
      - screenwriter_auth:
        - "read:scripts"
    post:
      tags:
      - "scripts"
      summary: "Add a new script"
      description: "Add a new script to a project"
      operationId: "postScripts"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the project"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Script"
        400:
          description: "Invalid Script"
      security:
      - screenwriter_auth:
        - "write:scripts"
    put:
      tags:
      - "scripts"
      summary: "Update a script"
      description: "Update an existing script in a project"
      operationId: "putScripts"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the project"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Script"
        400:
          description: "Invalid Script"
      security:
      - screenwriter_auth:
        - "write:scripts"
    delete:
      tags:
      - "scripts"
      summary: "Delete a script"
      description: "Delete a script from a project"
      operationId: "deleteScripts"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the project"
        required: true
        schema:
          $ref: "#/definitions/Script"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Script"
        400:
          description: "Invalid Script"
      security:
      - screenwriter_auth:
        - "delete:scripts"
  /scripts/{id}:
    get:
      tags:
      - "scripts"
      summary: "Find script by ID"
      description: "Returns a single script"
      operationId: "getScriptById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of script to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Script"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Project not found"
      security:
      - screenwriter_auth:
        - "read:scripts"
  /scripts/search?term=searchby&value=searchfor:
    get:
      tags:
      - "scripts"
      summary: "Finds Scripts by title"
      description: "Each script should have a unique title"
      operationId: "getScriptsByTitle"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "The term to search by"
        required: true
        type: "string"
        x-exportParamName: "Term"
      - name: "value"
        in: "query"
        description: "The value to search for"
        required: true
        type: "string"
        x-exportParamName: "Value"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Script"
        400:
          description: "Invalid tag value"
      security:
      - screenwriter_auth:
        - "read:scripts"
  /documents:
    get:
      tags:
      - "documents"
      summary: "Get documents scripts"
      description: "Retrieve all documents for a project"
      operationId: "getDocuments"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the project"
        required: true
        schema:
          $ref: "#/definitions/Document"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Document"
        400:
          description: "Invalid Script"
      security:
      - screenwriter_auth:
        - "read:documents"
    post:
      tags:
      - "documents"
      summary: "Add a new script"
      description: "Add a new document to a project"
      operationId: "postDocuments"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the document"
        required: true
        schema:
          $ref: "#/definitions/Document"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Script"
        400:
          description: "Invalid Script"
      security:
      - screenwriter_auth:
        - "write:documents"
    put:
      tags:
      - "documents"
      summary: "Update a document"
      description: "Update an existing document in a project"
      operationId: "putDocuments"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the document"
        required: true
        schema:
          $ref: "#/definitions/Document"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Document"
        400:
          description: "Invalid Document"
      security:
      - screenwriter_auth:
        - "write:documents"
    delete:
      tags:
      - "documents"
      summary: "Delete a document"
      description: "Delete a document from a project"
      operationId: "deleteDocument"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "id"
        description: "id of the project"
        required: true
        schema:
          $ref: "#/definitions/Document"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Document"
        400:
          description: "Invalid Document"
      security:
      - screenwriter_auth:
        - "delete:scripts"
  /documents/{id}:
    get:
      tags:
      - "documents"
      summary: "Find document by ID"
      description: "Returns a single document"
      operationId: "getDocumentById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of document to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Document"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Project not found"
      security:
      - screenwriter_auth:
        - "read:documents"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
        x-exportParamName: "Password"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  screenwriter_auth:
    type: "oauth2"
    authorizationUrl: "http://burningphantom.com/oauth/dialog"
    flow: "implicit"
    scopes:
      write:projects: "modify projects in your account"
      read:projects: "read your projects"
      delete:projects: "delete a project"
      write:scripts: "modify scripts in your projects"
      read:scripts: "read scripts in your projects"
      delete:scripts: "delete a script"
      write:documents: "modify documents in your projects"
      read:documents: "read documents in your projects"
      delete:documents: "delete a document"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Project:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      owner:
        type: "integer"
        format: "int64"
      created_date:
        type: "integer"
        format: "int64"
      updated_date:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Project Status"
        default: "false"
        enum:
        - "inactive"
        - "active"
        - "review"
    example:
      owner: 6
      id: 0
      created_date: 1
      updated_date: 5
      title: "title"
      status: "false"
    xml:
      name: "Project"
  Script:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      text:
        type: "string"
      author:
        type: "integer"
        format: "int64"
      created_date:
        type: "integer"
        format: "int64"
      updated_date:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Project Status"
        default: "false"
        enum:
        - "inactive"
        - "active"
        - "review"
    example:
      author: 6
      id: 0
      text: "text"
      created_date: 1
      updated_date: 5
      title: "title"
      status: "false"
    xml:
      name: "Script"
  Document:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      type:
        type: "string"
      text:
        type: "string"
      author:
        type: "integer"
        format: "int64"
      created_date:
        type: "string"
      updated_date:
        type: "string"
    example:
      author: 6
      id: 0
      text: "text"
      created_date: "created_date"
      updated_date: "updated_date"
      title: "title"
      type: "type"
    xml:
      name: "Document"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
    xml:
      name: "User"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
